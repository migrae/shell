MINISHELL

helpful src: https://www.geeksforgeeks.org/making-linux-shell-c/
READLINE:
	Function: void rl_clear_history (void)
	Clear the history list by deleting all of the entries, in the same manner as the History library’s clear_history() function. This differs from clear_history because it frees private data Readline saves in the history list.

	Function: int rl_on_new_line (void)
	Tell the update functions that we have moved onto a new (empty) line, usually after outputting a newline.

	Function: void rl_replace_line (const char *text, int clear_undo)
	Replace the contents of rl_line_buffer with text. The point and mark are preserved, if possible. If clear_undo is non-zero, the undo list associated with the current line is cleared.

	Function: void rl_redisplay (void)
	Change what’s displayed on the screen to reflect the current contents of rl_line_buffer.

	Add_history:
	If you want the user to be able to get at the line later, (with C-p for example), you must call add_history() to save the line away in a history list of such lines.
	add_history (line);
	For full details on the GNU History Library, see the associated manual.

GETCWD:
	The getcwd() function copies the absolute pathname of the current working directory into the memory referenced by buf and returns a pointer to buf.  The size argument is the size, in bytes,
	of the array referenced by buf.

CHDIR:
	The path argument points to the pathname of a directory.  The chdir() function causes the named directory to become the current working directory, that is, the starting point for path
	searches of pathnames not beginning with a slash, `/'.

STAT:
	The STAT() function obtains information about the file pointed to by path.  Read, write or execute permission of the named file is not required, but all directories listed in the path name leading to the file must be searchable.
	The LSTAT() function is like stat() except in the case where the named file is a symbolic link; lstat() returns information about the link, while stat() returns information about the file the link references
	The FSTAT() obtains the same information about an open file known by the file descriptor fildes.

DIR:
	The OPENDIR() function opens the directory named by filename, associates a directory stream with it and returns a pointer to be used to identify the directory stream in subsequent operations.
	The pointer NULL is returned if filename cannot be accessed, or if it cannot malloc(3) enough memory to hold the whole thing.
	The READDIR() function returns a pointer to the next directory entry.  The directory entry remains valid until the next call to readdir() or closedir() on the same directory stream.  The
	function returns NULL upon reaching the end of the directory or on error.
	The CLOSEDIR() function closes the named directory stream and frees the structure associated with the dirp pointer, returning 0 on success.

FD:
	The ISATTY() function determines if the file descriptor fd refers to a valid terminal type device.
	The TTYNAME() function gets the related device name of a file descriptor for which isatty() is true.
	The legacy function TTYSLOT() returns the index of the current user's entry in some file.

	The IOCTL() function manipulates the underlying device parameters of special files.  In particular, many operating characteristics of character special files (e.g. terminals) may be con-
	trolled with ioctl() requests.  The argument fildes must be an open file descriptor.

TERMCAP:

	The TCGETATTR(), and TCSETATTR() functions are provided for getting and setting the termios structure.
	The TGETENT routine loads the entry for name.  It returns 1 on success, 0 if there is no such entry, and -1 if the terminfo database could not be found.  The emulation  ignores  the  buffer
	pointer bp.
	The TGETFLAG routine gets the boolean entry for id, or zero if it is not available.
	The TGETNUM routine gets the numeric entry for id, or -1 if it is not available.
	The TGETSTR routine returns the string entry for id, or zero if it is not available.  Use tputs to output the returned string.  The return value will also be copied to the buffer pointed to
	by area, and the area value will be updated to point past the null ending this value.
	Only the first two characters of the id parameter of TGETFLAG, tgetnum and tgetstr are compared in lookups.
	The TGOTO routine instantiates the parameters into the given capability.  The output from this routine is to be passed to tputs.
	The TPUTS routine is described on the curs_terminfo(3X) manual page.  It can retrieve capabilities by either termcap or terminfo name.